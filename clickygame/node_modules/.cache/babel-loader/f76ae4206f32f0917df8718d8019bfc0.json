{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeProgress = exports.ProgressMeterText = exports.ProgressMeterWithText = exports.ProgressMeter = exports.Progress = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _enums = require('../enums');\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Progress component.\n * http://foundation.zurb.com/sites/docs/progress-bar.html\n *\n * @param {Object} props\n * @returns {Object}\n */\n\n\nvar Progress = exports.Progress = function Progress(props) {\n  var _props$meter = props.meter,\n      meterProps = _props$meter === undefined ? {} : _props$meter;\n  var className = (0, _utils.createClassName)(props.noDefaultClassName ? null : 'progress', props.className, props.color, (0, _utils.generalClassNames)(props));\n\n  if (props.value) {\n    meterProps.style = meterProps.style || {};\n    meterProps.style.width = props.value + '%';\n  }\n\n  var passProps = (0, _utils.removeProps)(props, (0, _utils.objectKeys)(Progress.propTypes));\n  return _react2.default.createElement('div', _extends({}, passProps, {\n    className: className,\n    role: 'progressbar',\n    'aria-valuemin': props.min,\n    'aria-valuemax': props.max,\n    'aria-valuenow': props.value,\n    'aria-valuetext': props.valueText\n  }), meterProps.text ? _react2.default.createElement(ProgressMeterWithText, meterProps) : _react2.default.createElement(ProgressMeter, meterProps));\n};\n\nProgress.propTypes = _extends({}, _utils.GeneralPropTypes, _utils.FlexboxPropTypes, {\n  min: _propTypes2.default.number,\n  max: _propTypes2.default.number,\n  value: _propTypes2.default.number,\n  color: _propTypes2.default.oneOf((0, _utils.objectValues)(_enums.ProgressColors))\n});\n/**\n * Progress meter sub-component.\n *\n * @param {Object} props\n * @returns {Object}\n */\n\nvar ProgressMeter = exports.ProgressMeter = function ProgressMeter(props) {\n  var className = (0, _utils.createClassName)(props.noDefaultClassName ? null : 'progress-meter', props.className, (0, _utils.generalClassNames)(props));\n  var passProps = (0, _utils.removeProps)(props, (0, _utils.objectKeys)(ProgressMeter.propTypes));\n  return _react2.default.createElement('div', _extends({}, passProps, {\n    className: className\n  }));\n};\n\nProgressMeter.propTypes = _extends({}, _utils.GeneralPropTypes);\n/**\n * Progress meter with text sub-component.\n *\n * @param {Object} props\n * @returns {Object}\n */\n\nvar ProgressMeterWithText = exports.ProgressMeterWithText = function ProgressMeterWithText(props) {\n  var className = (0, _utils.createClassName)(props.noDefaultClassName ? null : 'progress-meter', props.className, (0, _utils.generalClassNames)(props));\n  var passProps = (0, _utils.removeProps)(props, (0, _utils.objectKeys)(ProgressMeterWithText.propTypes));\n  return _react2.default.createElement('span', _extends({}, passProps, {\n    className: className\n  }), _react2.default.createElement(ProgressMeterText, null, props.text));\n};\n\nProgressMeterWithText.propTypes = _extends({}, _utils.GeneralPropTypes, _utils.FlexboxPropTypes, {\n  text: _propTypes2.default.string.isRequired\n});\n/**\n * Progress meter text sub-component.\n *\n * @param {Object} props\n * @returns {Object}\n */\n\nvar ProgressMeterText = exports.ProgressMeterText = function ProgressMeterText(props) {\n  var className = (0, _utils.createClassName)(props.noDefaultClassName ? null : 'progress-meter-text', props.className, (0, _utils.generalClassNames)(props));\n  var passProps = (0, _utils.removeProps)(props, (0, _utils.objectKeys)(ProgressMeterText.propTypes));\n  return _react2.default.createElement('p', _extends({}, passProps, {\n    className: className\n  }));\n};\n\nProgressMeterText.propTypes = _extends({}, _utils.GeneralPropTypes);\n/**\n * Native progress component.\n * http://foundation.zurb.com/sites/docs/progress-bar.html#native-progress\n *\n * @returns {Object}\n */\n\nvar NativeProgress = exports.NativeProgress = function NativeProgress(props) {\n  var className = (0, _utils.createClassName)(props.className, props.color, (0, _utils.generalClassNames)(props));\n  var passProps = (0, _utils.removeProps)(props, (0, _utils.objectKeys)(NativeProgress.propTypes));\n  return _react2.default.createElement('progress', _extends({}, passProps, {\n    max: props.max,\n    value: props.value,\n    className: className\n  }));\n};\n\nNativeProgress.propTypes = _extends({}, _utils.GeneralPropTypes, _utils.FlexboxPropTypes, {\n  max: _propTypes2.default.number,\n  value: _propTypes2.default.number,\n  color: _propTypes2.default.oneOf((0, _utils.objectValues)(_enums.ProgressColors))\n}); // TODO: Consider adding support for native meter.","map":null,"metadata":{},"sourceType":"script"}