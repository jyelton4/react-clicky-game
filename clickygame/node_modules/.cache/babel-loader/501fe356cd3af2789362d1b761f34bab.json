{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FlexboxPropTypes = exports.GeneralPropTypes = undefined;\nexports.createClassName = createClassName;\nexports.generalClassNames = generalClassNames;\nexports.objectKeys = objectKeys;\nexports.objectValues = objectValues;\nexports.removeProps = removeProps;\nexports.isDefined = isDefined;\nexports.addBreakpoint = addBreakpoint;\nexports.setDirection = setDirection;\nexports.flexboxClassNames = flexboxClassNames;\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _enums = require('./enums');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Property types for general properties.\n *\n * @returns {Object}\n */\n\n\nvar GeneralPropTypes = exports.GeneralPropTypes = {\n  showFor: _propTypes2.default.oneOf([_enums.Breakpoints.MEDIUM, _enums.Breakpoints.LARGE]),\n  showOnlyFor: _propTypes2.default.oneOf(objectValues(_enums.Breakpoints)),\n  hideFor: _propTypes2.default.oneOf([_enums.Breakpoints.MEDIUM, _enums.Breakpoints.LARGE]),\n  hideOnlyFor: _propTypes2.default.oneOf(objectValues(_enums.Breakpoints)),\n  isHidden: _propTypes2.default.bool,\n  isInvisible: _propTypes2.default.bool,\n  showForLandscape: _propTypes2.default.bool,\n  showForPortrait: _propTypes2.default.bool,\n  showForSr: _propTypes2.default.bool,\n  showOnFocus: _propTypes2.default.bool,\n  isClearfix: _propTypes2.default.bool,\n  float: _propTypes2.default.oneOf(objectValues(_enums.FloatTypes))\n};\n/**\n * Creates class names from the given arguments.\n *\n * @param {*} args\n * @returns {string}\n */\n\nfunction createClassName() {\n  return _classnames2.default.apply(undefined, arguments);\n}\n/**\n * Parses the general class names from the given properties.\n *\n * @param {Object} props\n * @returns {Object}\n */\n\n\nfunction generalClassNames(props) {\n  return {\n    'show-for-medium': props.showFor === _enums.Breakpoints.MEDIUM,\n    'show-for-large': props.showFor === _enums.Breakpoints.LARGE,\n    'show-for-small-only': props.showOnlyFor === _enums.Breakpoints.SMALL,\n    'show-for-medium-only': props.showOnlyFor === _enums.Breakpoints.MEDIUM,\n    'show-for-large-only': props.showOnlyFor === _enums.Breakpoints.LARGE,\n    'hide-for-medium': props.hideFor === _enums.Breakpoints.MEDIUM,\n    'hide-for-large': props.hideFor === _enums.Breakpoints.LARGE,\n    'hide-for-small-only': props.hideOnlyFor === _enums.Breakpoints.SMALL,\n    'hide-for-medium-only': props.hideOnlyFor === _enums.Breakpoints.MEDIUM,\n    'hide-for-large-only': props.hideOnlyFor === _enums.Breakpoints.LARGE,\n    'hide': props.isHidden,\n    'invisible': props.isInvisible,\n    'show-for-landscape': props.showForLandscape,\n    'show-for-portrait': props.showForPortrait,\n    'show-for-sr': props.showForSr,\n    'show-on-focus': props.showOnFocus,\n    'clearfix': props.isClearfix,\n    'float-left': props.float === _enums.FloatTypes.LEFT,\n    'float-center': props.float === _enums.FloatTypes.CENTER,\n    'float-right': props.float === _enums.FloatTypes.RIGHT\n  };\n}\n/**\n * Returns the keys for the given object.\n * This method is used for getting the keys for prop types.\n *\n * @param {Object} object\n * @returns {Array}\n */\n\n\nfunction objectKeys(object) {\n  return Object.keys(object);\n}\n/**\n * Returns the values for the given object.\n * This method is used for getting the values for enumerables.\n *\n * @param {Object} object\n * @returns {Array}\n */\n\n\nfunction objectValues(object) {\n  var values = [];\n\n  for (var property in object) {\n    if (object.hasOwnProperty(property)) {\n      values.push(object[property]);\n    }\n  }\n\n  return values;\n}\n/**\n * Removes properties from the given object.\n * This method is used for removing valid attributes from component props prior to rendering.\n *\n * @param {Object} object\n * @param {Array} remove\n * @returns {Object}\n */\n\n\nfunction removeProps(object, remove) {\n  var result = {};\n\n  for (var property in object) {\n    if (object.hasOwnProperty(property) && remove.indexOf(property) === -1) {\n      result[property] = object[property];\n    }\n  }\n\n  return result;\n}\n/**\n * Returns whether or not the given value is defined.\n *\n * @param {*} value\n * @returns {boolean}\n */\n\n\nfunction isDefined(value) {\n  return typeof value !== 'undefined';\n}\n/**\n * Adds a breakpoint to a class if breakpoint is specified.\n *\n * @param {String} prop\n * @param {String} size\n * @returns {string}\n */\n\n\nfunction addBreakpoint(prop, size) {\n  return size === 'all' ? prop : size + '-' + prop;\n}\n/**\n * Sets direction for grid and gutters (horizontal or vertical).\n *\n * @param {boolean} isVertical\n * @param {String} gutters\n * @returns {string}\n */\n\n\nfunction setDirection(isVertical) {\n  var gutters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (gutters) {\n    return isVertical === true ? 'grid-' + gutters + '-y' : 'grid-' + gutters + '-x';\n  } else {\n    return isVertical === true ? 'grid-y' : 'grid-x';\n  }\n} // Flexbox Utilities\n\n/**\n * Property types for flexbox utilities.\n *\n * @returns {Object}\n */\n\n\nvar FlexboxPropTypes = exports.FlexboxPropTypes = {\n  alignX: _propTypes2.default.oneOf(objectValues(_enums.HorizontalAlignments)),\n  alignY: _propTypes2.default.oneOf(objectValues(_enums.VerticalAlignments)),\n  selfAlignX: _propTypes2.default.oneOf(objectValues(_enums.HorizontalAlignments)),\n  selfAlignY: _propTypes2.default.oneOf(objectValues(_enums.VerticalAlignments)),\n  centerAlign: _propTypes2.default.bool,\n  flexContainer: _propTypes2.default.bool,\n  flexDirRow: _propTypes2.default.oneOf(objectValues(_enums.ExtendedBreakpoints)),\n  flexDirRowRev: _propTypes2.default.oneOf(objectValues(_enums.ExtendedBreakpoints)),\n  flexDirCol: _propTypes2.default.oneOf(objectValues(_enums.ExtendedBreakpoints)),\n  flexDirColRev: _propTypes2.default.oneOf(objectValues(_enums.ExtendedBreakpoints)),\n  flexChild: _propTypes2.default.oneOf(objectValues(_enums.SpaceControls)),\n  flexOrder: _propTypes2.default.number,\n  flexOrderSmall: _propTypes2.default.number,\n  flexOrderMedium: _propTypes2.default.number,\n  flexOrderLarge: _propTypes2.default.number\n};\n/**\n * Parses the flexbox class names from the given properties.\n *\n * @param {Object} props\n * @returns {Object}\n */\n\nfunction flexboxClassNames(props) {\n  var _ref;\n\n  return _ref = {\n    'flex-container': props.flexContainer,\n    'align-center-middle': props.centerAlign\n  }, _defineProperty(_ref, 'align-' + props.alignX, props.alignX), _defineProperty(_ref, 'align-' + props.alignY, props.alignY), _defineProperty(_ref, addBreakpoint('flex-dir-row', props.flexDirRow), props.flexDirRow), _defineProperty(_ref, addBreakpoint('flex-dir-row-reverse', props.flexDirRowRev), props.flexDirRowRev), _defineProperty(_ref, addBreakpoint('flex-dir-column', props.flexDirCol), props.flexDirCol), _defineProperty(_ref, addBreakpoint('flex-dir-column-reverse', props.flexDirColRev), props.flexDirColRev), _defineProperty(_ref, 'flex-child-' + props.flexChild, props.flexChild), _defineProperty(_ref, 'order-' + props.flexOrder, props.flexOrder), _defineProperty(_ref, 'small-order-' + props.flexOrder, props.flexOrderSmall), _defineProperty(_ref, 'medium-order-' + props.flexOrder, props.flexOrderMedium), _defineProperty(_ref, 'large-order-' + props.flexOrder, props.flexOrderLarge), _ref;\n}","map":null,"metadata":{},"sourceType":"script"}