{"ast":null,"code":"\"use strict\";\n\nimport $ from 'jquery'; // Core Foundation Utilities, utilized in a number of places.\n\n/**\n * Returns a boolean for RTL support\n */\n\nfunction rtl() {\n  return $('html').attr('dir') === 'rtl';\n}\n/**\n * returns a random base-36 uid with namespacing\n * @function\n * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\n * @param {String} namespace - name of plugin to be incorporated in uid, optional.\n * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\n * @returns {String} - unique id\n */\n\n\nfunction GetYoDigits(length, namespace) {\n  length = length || 6;\n  return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? \"-\".concat(namespace) : '');\n}\n/**\n * Escape a string so it can be used as a regexp pattern\n * @function\n * @see https://stackoverflow.com/a/9310752/4317384\n *\n * @param {String} str - string to escape.\n * @returns {String} - escaped string\n */\n\n\nfunction RegExpEscape(str) {\n  return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n\nfunction transitionend($elem) {\n  var transitions = {\n    'transition': 'transitionend',\n    'WebkitTransition': 'webkitTransitionEnd',\n    'MozTransition': 'transitionend',\n    'OTransition': 'otransitionend'\n  };\n  var elem = document.createElement('div'),\n      end;\n\n  for (var t in transitions) {\n    if (typeof elem.style[t] !== 'undefined') {\n      end = transitions[t];\n    }\n  }\n\n  if (end) {\n    return end;\n  } else {\n    end = setTimeout(function () {\n      $elem.triggerHandler('transitionend', [$elem]);\n    }, 1);\n    return 'transitionend';\n  }\n}\n/**\n * Return an event type to listen for window load.\n *\n * If `$elem` is passed, an event will be triggered on `$elem`. If window is already loaded, the event will still be triggered.\n * If `handler` is passed, attach it to the event on `$elem`.\n * Calling `onLoad` without handler allows you to get the event type that will be triggered before attaching the handler by yourself.\n * @function\n *\n * @param {Object} [] $elem - jQuery element on which the event will be triggered if passed.\n * @param {Function} [] handler - function to attach to the event.\n * @returns {String} - event type that should or will be triggered.\n */\n\n\nfunction onLoad($elem, handler) {\n  var didLoad = document.readyState === 'complete';\n  var eventType = (didLoad ? '_didLoad' : 'load') + '.zf.util.onLoad';\n\n  var cb = function cb() {\n    return $elem.triggerHandler(eventType);\n  };\n\n  if ($elem) {\n    if (handler) $elem.one(eventType, handler);\n    if (didLoad) setTimeout(cb);else $(window).one('load', cb);\n  }\n\n  return eventType;\n}\n\nfunction onLeaveElement($elem, handler) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$leaveWindow = _ref.leaveWindow,\n      leaveWindow = _ref$leaveWindow === void 0 ? true : _ref$leaveWindow;\n\n  var eventType = 'mouseleave.zf.util.onLeaveElement';\n\n  if ($elem && handler) {\n    $elem.on(eventType, function leaveHandler(e) {\n      for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        rest[_key - 1] = arguments[_key];\n      }\n\n      var _this = this;\n\n      setTimeout(function leaveEventDebouncer() {\n        if (e.relatedTarget === null && leaveWindow && document.hasFocus && document.hasFocus()) {\n          $(document).one('mouseenter', function reenterHandler(reeenterE) {\n            if ($elem.has(reeenterE.target).length) {\n              return false;\n            }\n\n            ;\n            e.relatedTarget = reeenterE.target;\n            handler.call.apply(handler, [_this, e].concat(rest));\n          });\n          return false;\n        }\n\n        handler.call.apply(handler, [_this, e].concat(rest));\n      });\n    });\n  }\n\n  return eventType;\n}\n\nexport { rtl, GetYoDigits, RegExpEscape, transitionend, onLoad, onLeaveElement };","map":null,"metadata":{},"sourceType":"module"}