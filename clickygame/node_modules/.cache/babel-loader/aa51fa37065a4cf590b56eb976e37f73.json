{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * Breakpoints enumerable.\n *\n * @type {{SMALL: string, MEDIUM: string, LARGE: string, XLARGE: string, XXLARGE: string}}\n */\n\n\nvar Breakpoints = exports.Breakpoints = {\n  SMALL: 'small',\n  MEDIUM: 'medium',\n  LARGE: 'large',\n  XLARGE: 'xlarge',\n  XXLARGE: 'xxlarge'\n};\n/**\n * Badge color enumerable.\n *\n * @type {Object}\n */\n\nvar BadgeColors = exports.BadgeColors = {\n  INFO: 'info',\n  SECONDARY: 'secondary',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ALERT: 'alert'\n};\n/**\n * Button color enumerable.\n *\n * @type {Object}\n */\n\nvar ButtonColors = exports.ButtonColors = {\n  PRIMARY: 'primary',\n  SECONDARY: 'secondary',\n  SUCCESS: 'success',\n  ALERT: 'alert',\n  WARNING: 'warning'\n};\n/**\n * Button group color enumerable.\n *\n * @type {Object}\n */\n\nvar ButtonGroupColors = exports.ButtonGroupColors = {\n  PRIMARY: 'primary',\n  SECONDARY: 'secondary',\n  SUCCESS: 'success',\n  ALERT: 'alert',\n  WARNING: 'warning'\n};\n/**\n * Callout color enumerable.\n *\n * @type {Object}\n */\n\nvar CalloutColors = exports.CalloutColors = {\n  PRIMARY: 'primary',\n  SECONDARY: 'secondary',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ALERT: 'alert'\n};\n/**\n * Label color enumerable.\n *\n * @type {Object}\n */\n\nvar LabelColors = exports.LabelColors = {\n  INFO: 'info',\n  SECONDARY: 'secondary',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ALERT: 'alert'\n};\n/**\n * Progress colors enumerable.\n *\n * @type {Object}\n */\n\nvar ProgressColors = exports.ProgressColors = {\n  SECONDARY: 'secondary',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ALERT: 'alert'\n};\n/**\n * Color meta-enumerable.\n * This is exposed to the consumer, while the sub-sets are only used internally.\n *\n * @type {Object}\n */\n\nvar Colors = exports.Colors = _extends({}, BadgeColors, ButtonColors, ButtonGroupColors, CalloutColors, LabelColors, ProgressColors);\n/**\n * Callout size enumerable.\n *\n * @type {Object}\n */\n\n\nvar CalloutSizes = exports.CalloutSizes = {\n  SMALL: 'small',\n  LARGE: 'large'\n};\n/**\n * Button size enumerable.\n *\n * @type {Object}\n */\n\nvar ButtonSizes = exports.ButtonSizes = {\n  TINY: 'tiny',\n  SMALL: 'small',\n  LARGE: 'large'\n};\n/**\n * Button group size enumerable.\n *\n * @type {Object}\n */\n\nvar ButtonGroupSizes = exports.ButtonGroupSizes = {\n  TINY: 'tiny',\n  SMALL: 'small',\n  LARGE: 'large'\n};\n/**\n * Switch size enumerable.\n *\n * @type {Object}\n */\n\nvar SwitchSizes = exports.SwitchSizes = {\n  TINY: 'tiny',\n  SMALL: 'small',\n  LARGE: 'large'\n};\n/**\n * Size meta-enumerable.\n * This is exposed to the consumer, while the sub-sets are only used internally.\n *\n * @type {Object}\n */\n\nvar Sizes = exports.Sizes = _extends({}, ButtonSizes, ButtonGroupSizes, CalloutSizes, SwitchSizes);\n/**\n * Horizontal alignment enumerable.\n *\n * @type {Object}\n */\n\n\nvar HorizontalAlignments = exports.HorizontalAlignments = {\n  CENTER: 'center',\n  RIGHT: 'right',\n  JUSTIFY: 'justify',\n  SPACED: 'spaced'\n};\n/**\n * Vertical alignment enumerable.\n *\n * @type {Object}\n */\n\nvar VerticalAlignments = exports.VerticalAlignments = {\n  TOP: 'top',\n  MIDDLE: 'middle',\n  BOTTOM: 'bottom',\n  STRETCH: 'stretch'\n};\n/**\n * Menu alignment enumerable.\n *\n * @type {{RIGHT: string, CENTER: string}}\n */\n\nvar MenuAlignments = exports.MenuAlignments = {\n  RIGHT: 'right',\n  CENTER: 'center'\n};\n/**\n * Alignments meta-enumerable.\n * This is exposed to the consumer, while the sub-sets are only used internally.\n *\n * @type {Object}\n */\n\nvar Alignments = exports.Alignments = _extends({}, HorizontalAlignments, VerticalAlignments, MenuAlignments);\n/**\n * Float types enumerable.\n *\n * @type {{LEFT: string, CENTER: string, RIGHT: string}}\n */\n\n\nvar FloatTypes = exports.FloatTypes = {\n  LEFT: 'left',\n  CENTER: 'center',\n  RIGHT: 'right'\n};\n/**\n * Switch type enumerable.\n *\n * @type {Object}\n */\n\nvar SwitchInputTypes = exports.SwitchInputTypes = {\n  CHECKBOX: 'checkbox',\n  RADIO: 'radio'\n};\n/**\n * Input type meta-enumerable.\n * This is exposed to the consumer, while the sub-sets are only used internally.\n *\n * @type {Object}\n */\n\nvar InputTypes = exports.InputTypes = _extends({}, SwitchInputTypes);\n/**\n * Gutter type enumerable.\n *\n * @type {Object}\n */\n\n\nvar GutterTypes = exports.GutterTypes = {\n  MARGIN: 'margin',\n  PADDING: 'padding'\n};\n/**\n * Extended breakpoints enumerable (includes 'ALL' option, which is useful when breakpoint is not defined).\n *\n * @type {{SMALL: string, MEDIUM: string, LARGE: string, XLARGE: string, XXLARGE: string, ALL: string}}\n */\n\nvar ExtendedBreakpoints = exports.ExtendedBreakpoints = {\n  SMALL: 'small',\n  MEDIUM: 'medium',\n  LARGE: 'large',\n  XLARGE: 'xlarge',\n  XXLARGE: 'xxlarge',\n  ALL: 'all'\n};\n/**\n * Space control enumerable.\n *\n * @type {Object}\n */\n\nvar SpaceControls = exports.SpaceControls = {\n  AUTO: 'auto',\n  GROW: 'grow',\n  SHRINK: 'shrink'\n};","map":null,"metadata":{},"sourceType":"script"}