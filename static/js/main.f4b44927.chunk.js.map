{"version":3,"sources":["components/NavText.js","components/TopBar.js","components/Banner.js","components/BottomBar.js","utils/API.js","components/images/Photo.js","App.js","serviceWorker.js","index.js"],"names":["styles","text","color","fontSize","NavText","props","react_default","a","createElement","className","href","style","pText","background","TopBar","components_NavText","score","topScore","Banner","BottomBar","API","getPhotos","axios","get","Photo","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clicked","clickedPhoto","handleScore","url","shuffleArray","_this2","photo","width","height","cursor","backgroundImage","backgroundSize","backgroundPosition","margin","border","role","onClick","handleClick","Component","main","display","minHeight","flexWrap","justifyContent","App","results","guessed","fetchPhotos","then","res","setState","data","message","catch","err","console","log","childState","newScore","indexOf","prevState","toConsumableArray","concat","forceUpdate","event","temporaryValue","randomIndex","array","currentIndex","length","Math","floor","random","components_TopBar","components_Banner","map","photoLink","images_Photo","key","components_BottomBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQAEMA,SAAS,CACXC,KAAM,CACJC,MAAO,QACPC,SAAU,MAQDC,EAJC,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,KAAK,IAAIC,MAAOX,EAAOC,MAAOI,EAAMO,QCP/DZ,EAAS,CACba,WAAY,CACVA,WAAY,WAYDC,EARA,SAAAT,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CAA8CE,MAAOX,EAAOa,YAChFP,EAAAC,EAAAC,cAACO,EAAD,CAASH,MAAM,gBACfN,EAAAC,EAAAC,cAACO,EAAD,CAASH,MAAM,YACfN,EAAAC,EAAAC,cAACO,EAAD,CAASH,MAAO,UAAYP,EAAMW,MAAQ,iBAAmBX,EAAMY,aCJxDC,EAPA,kBACXZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,kGCHFR,EAAS,CACXa,WAAY,CACVA,WAAY,WAUHM,EANG,kBACdb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBE,MAAOX,EAAOa,+BCNxCO,EAAA,CACXC,UAAW,WACP,OAAOC,IAAMC,IAJL,gDCqEDC,cA5CX,SAAAA,EAAYnB,GAAO,IAAAoB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvB,KACD2B,MAAQ,CACTC,SAAS,GAHER,2EAmBPS,GACRN,KAAKvB,MAAM8B,YAAYD,EAAa7B,MAAM+B,KAC1CR,KAAKvB,MAAMgC,gDAGN,IAAAC,EAAAV,KACDW,EAAQ,CACJC,MAAO,IACPC,OAAQ,IACRC,OAAQ,UACRC,gBAAiB,OAAOf,KAAKvB,MAAM+B,IAAI,IACvCQ,eAAgB,QAChBC,mBAAoB,MACpBC,OAAQ,WACRC,OAAQ,qBAEhB,OAAOzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACtBE,MAAO4B,EACPS,KAAK,MACLC,QAAS,kBAAMX,EAAKY,YAAYZ,aAvCpBa,aCjBdnD,EAAS,CACboD,KAAM,CACJC,QAAS,OACTC,UAAW,MACXC,SAAU,OACVC,eAAgB,SAChBV,OAAQ,WAyEGW,6MAnEbzB,MAAQ,CACN0B,QAAS,GACTC,QAAS,GACT3C,MAAO,EACPC,SAAU,KAOZ2C,YAAc,WACVxC,EAAIC,YACDwC,KAAK,SAAAC,GAAG,OAAIrC,EAAKsC,SAAS,CAAEL,QAASI,EAAIE,KAAKC,YAC9CC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAGhChC,YAAc,SAACmC,GACb,IAAIX,EAAUlC,EAAKO,MAAM2B,QACrBY,EAAW9C,EAAKO,MAAMhB,MAAQ,GACG,IAAjC2C,EAAQa,QAAQF,IAClB7C,EAAKsC,SAAS,CAAE/C,MAAOuD,IACvB9C,EAAKsC,SAAS,SAAAU,GAAS,MAAK,CAC1Bd,QAAQjC,OAAAgD,EAAA,EAAAhD,CAAK+C,EAAUd,SAAhBgB,OAAA,CAAyBL,QAEzB7C,EAAKO,MAAMhB,MAAQS,EAAKO,MAAMf,UACvCQ,EAAKsC,SAAS,CAAE9C,SAAUQ,EAAKO,MAAMhB,MAAOA,MAAO,IACnDS,EAAKmD,gBAELnD,EAAKsC,SAAS,CAAEJ,QAAS,GAAI3C,MAAO,IACpCS,EAAKmD,kBAITvC,aAAe,SAAAwC,GAIb,IAHA,IACiCC,EAAgBC,EAD7CC,EAAQvD,EAAKO,MAAM0B,QACnBuB,EAAeD,EAAME,OAElB,IAAMD,GAEXF,EAAcI,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCH,EAAiBE,EAFjBC,GAAgB,GAGhBD,EAAMC,GAAgBD,EAAMD,GAC5BC,EAAMD,GAAeD,EAGvBrD,EAAKsC,SAAS,CAAEL,QAASsB,wFAxCvBpD,KAAKgC,+CA2CA,IAAAtB,EAAAV,KACP,OAAOtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACpBH,EAAAC,EAAAC,cAAC8E,EAAD,CAAQtE,MAAOY,KAAKI,MAAMhB,MAAOC,SAAUW,KAAKI,MAAMf,WACtDX,EAAAC,EAAAC,cAAC+E,EAAD,MACAjF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYE,MAAOX,EAAOoD,MACvCxB,KAAKI,MAAM0B,QAAQ8B,IAAK,SAAAC,GAAS,OAChCnF,EAAAC,EAAAC,cAACkF,EAAD,CAAOC,IAAKrD,EAAKN,MAAM0B,QAAQc,QAAQiB,GACvCrD,IAAKqD,EAAWpD,aAAcC,EAAKD,aACnCF,YAAaG,EAAKH,iBAGtB7B,EAAAC,EAAAC,cAACoF,EAAD,cAhEYzC,aCRE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7F,EAAAC,EAAAC,cAAC4F,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.f4b44927.chunk.js","sourcesContent":["import React from \"react\";\n\nconst styles = {\n    text: {\n      color: \"white\", \n      fontSize: 25\n    }\n  }\n\nconst NavText = props => (\n    <div className=\"navbar-text\" href=\"#\" style={styles.text}>{props.pText}</div>\n);\n\nexport default NavText;","import React from \"react\";\nimport NavText from \"./NavText\";\n\nconst styles = {\n  background: {\n    background: \"purple\"\n  }\n}\n\nconst TopBar = props => {\n  return <div className=\"navbar navbar-light justify-content-between\" style={styles.background}>\n    <NavText pText=\"Clicky Game\" />\n    <NavText pText=\"Message\" />\n    <NavText pText={\"Score: \" + props.score + \" | Top Score: \" + props.topScore} />\n  </div>\n};\n\nexport default TopBar;","import React from \"react\";\n\nconst Banner = () => (\n    <div className=\"jumbotron text-center\">\n        <h2>Clicky Game!</h2>\n        <h4>Click an image to earn points, game ends when any image is clicked more than once!</h4>\n    </div>\n);\n\nexport default Banner;","import React from 'react';\n\nconst styles = {\n    background: {\n      background: \"purple\"\n    }\n};\n\nconst BottomBar = () => (\n    <div className=\"navbar navbar-light\" style={styles.background}>\n\n    </div>\n);\n\nexport default BottomBar;","import axios from \"axios\";\nconst BASEURL = \"https://dog.ceo/api/breeds/image/random/12\";\n\nexport default {\n    getPhotos: function() {\n        return axios.get(BASEURL);\n    }\n};","import React, { Component } from \"react\";\n\n// const Photo = props => {\n\n//     const styles = {\n//         photo: {\n//             width: 170,\n//             height: 170,\n//             cursor: \"pointer\",\n//             backgroundImage: \"url(\"+props.url+\")\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"50%\",\n//             margin: \"8px 25px\",\n//             border: \"5px solid #f1f1f1\"\n//         }\n//     }\n\n//     return <div className=\"col-xl-2 col-lg-2 col-md-3 col-sm-4 col-xs-4\"\n//     style={styles.photo}\n//     role=\"img\"\n//     onClick={props.shuffleArray}>\n//     </div>\n\n// };\n\nclass Photo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            clicked: false\n        }\n    };\n\n    // componentDidUpdate = (prevProps) => {\n    //     if (prevProps.url !== this.props.url) {\n    //         this.mapStateToProps();\n    //     }\n    // };\n\n    // mapStateToProps = () => {\n    //     let photo = JSON.parse(JSON.stringify(this.state.photo));\n    //     photo.backgroundImage = \"url(\"+this.props.url+\")\";\n    //     this.setState({ photo });\n    // };\n\n    handleClick(clickedPhoto) {\n        this.props.handleScore(clickedPhoto.props.url);\n        this.props.shuffleArray();\n    };\n\n    render() {\n        let photo = {\n                width: 170,\n                height: 170,\n                cursor: \"pointer\",\n                backgroundImage: \"url(\"+this.props.url+\")\",\n                backgroundSize: \"cover\",\n                backgroundPosition: \"50%\",\n                margin: \"8px 25px\",\n                border: \"5px solid #f1f1f1\"\n            }\n        return <div className=\"col-xl-2 col-lg-2 col-md-3 col-sm-4 col-xs-4\"\n        style={photo}\n        role=\"img\"\n        onClick={() => this.handleClick(this)}>\n    </div>\n    };\n\n};\n\nexport default Photo;","import React, { Component } from 'react';\nimport './App.css';\nimport TopBar from \"./components/TopBar\";\nimport Banner from \"./components/Banner\";\nimport BottomBar from \"./components/BottomBar\";\nimport API from \"./utils/API\";\nimport Photo from \"./components/images/Photo\";\n\nconst styles = {\n  main: {\n    display: \"flex\",\n    minHeight: \"80%\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    margin: \"0 auto\"\n  }\n}\n\nclass App extends Component {\n\n  state = {\n    results: [],\n    guessed: [],\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n      this.fetchPhotos();\n  };\n\n  fetchPhotos = () => {\n      API.getPhotos()\n        .then(res => this.setState({ results: res.data.message }))\n        .catch(err => console.log(err));\n  };\n\n  handleScore = (childState) => {\n    let guessed = this.state.guessed;\n    let newScore = this.state.score + 1;\n    if (guessed.indexOf(childState) === -1) {\n      this.setState({ score: newScore });\n      this.setState(prevState => ({\n        guessed: [...prevState.guessed, childState]\n      }))\n    } else if (this.state.score > this.state.topScore) {\n      this.setState({ topScore: this.state.score, score: 0 });\n      this.forceUpdate();\n    } else {\n      this.setState({ guessed: [], score: 0 });\n      this.forceUpdate();\n    }\n  };\n\n  shuffleArray = event => {\n    var array = this.state.results;\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({ results: array });\n  }\n  \n  render() {\n    return <div className=\"container\">\n      <TopBar score={this.state.score} topScore={this.state.topScore} />\n      <Banner />\n      <main className=\"container\" style={styles.main}>\n        {this.state.results.map( photoLink => \n          <Photo key={this.state.results.indexOf(photoLink)} \n          url={photoLink} shuffleArray={this.shuffleArray}\n          handleScore={this.handleScore}\n          />)}\n      </main>\n      <BottomBar />\n    </div>\n  }\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}